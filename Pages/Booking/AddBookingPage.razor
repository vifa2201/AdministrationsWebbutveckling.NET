@page "/addbooking"
@using System.ComponentModel.DataAnnotations
<h1 class="mb-4">Lägg till bokning</h1>
@if (bookingAdded)
{
    //meddelande lyckad bokning
    <div class="text-success" role="alert">
    Bokningen har lagts till!
</div>
}
<div class="form-group">
    <!---Formulär för bokning-->
    <EditForm Model="@newBooking" OnValidSubmit="AddNewBooking">
        <DataAnnotationsValidator />

        <ValidationMessage For="@(() => newBooking.TimeId)" class="text-danger" />
        <label for="bokningId">Lediga tider</label>
        @if (time != null)
        //loopar igenom lediga tider
        {
            <InputSelect class="form-select" id="bokningId" @bind-Value="@newBooking.TimeId">
                <option value="" disabled>Välj en tid</option>
                @foreach (var t in time)
                {
                    //loppar igen om alla tider och skriver ut de som är lediga
                    if (t.Available && t.Date >= DateTime.Today)
                    {
                        <option value="@t.Id">@t.Date.ToString("yyyy-MM-dd") kl @t.Time</option>
                    }
                }
            </InputSelect>
        }
        <ValidationMessage For="@(() => newBooking.HairLength)" class="text-danger" />
        <label for="hairlength">Hårlängd:</label>
        <InputSelect class="form-select " id="hairlength" @bind-Value="@newBooking.HairLength">
            <option value="" selected>Välj en hårlängd</option>
            <option value="Kort">Kort</option>
            <option value="Medel">Medel</option>
            <option value="Långt">Långt</option>
        </InputSelect>
        <ValidationMessage For="@(() => newBooking.HairType)" class="text-danger" />
        <label for="hairtype">Hårtyp:</label>
        <InputSelect class="form-select " id="hairtype" @bind-Value="@newBooking.HairType">
            <option value="" selected>Välj en håtyp</option>
            <option value="Test">Tunt</option>
            <option value="Medel">Medel</option>
            <option value="Tjockt">Tjockt</option>
        </InputSelect>
        <ValidationMessage For="@(() => newBooking.Hairdresser)" class="text-danger" />
        <label for="hairdresser">Frisör:</label>
        @if (hairdresser != null)
        //loppar igenom tillgängliga frislrer
        {
            <InputSelect class="form-select " id="hairdresser" @bind-Value="@newBooking.HairdresserId">

                @foreach (var h in hairdresser)
                {
                    <option value="@h.Id">@h.Name</option>
                }
            </InputSelect>
        }
        <ValidationMessage For="@(() => newBooking.Category)" class="text-danger" />
        <label for="kategori">Kategori:</label>
        @if (category != null)
        {
            <InputSelect class="form-select" id="kategori" @bind-Value="@newBooking.CategoryId">
                @foreach (var c in category)
                {
                    <option value="@c.Id">@c.Name</option>
                }
            </InputSelect>
        }
        <ValidationMessage For="@(() => newBooking.Message)" class="text-danger" />
        <label for="message">Meddelande:</label>
        <InputText name="message" id="message" class="form-control " @bind-Value="@newBooking.Message"></InputText>
        <h2>Kund information</h2>

        <label>
            Är du en ny kund?
            <InputCheckbox @bind-Value="@isNewCustomer"></InputCheckbox>
        </label>
        @if (isNewCustomer)
        {
                    //skapar en ny kund om ej befintlig
            <div>
                <ValidationMessage For="@(() => newCustomer.Name)" class="text-danger" />
                <label for="customerName">Kundens namn:</label>
                <InputText class="form-control " id="customerName" @bind-Value="@newCustomer.Name"></InputText>

                <label for="customerEmail">Kundens email:</label>
                <InputText class="form-control" type="email" id="customerEmail" @bind-Value="@newCustomer.Email">
                </InputText>

                <label for="customerPassword">Kundens lösenord:</label>
                <InputText class="form-control " type="password" id="customerPassword" @bind-Value="@newCustomer.Password">
                </InputText>
            </div>
        }
        else
        {
            //använder kundens id boka
            <div>
                <ValidationMessage For="@(() => newBooking.CustomerId)" class="text-danger" />
                <label for="customerId">Kundens ID:</label>
                <InputNumber class="form-control w-50" id="customerId" @bind-Value="newBooking.CustomerId"></InputNumber>
            </div>
        }

        <button type="submit" class="btn btn-standard mt-4">Lägg till Bokning</button>
    </EditForm>
</div>

@code
{
    //variabler
    private Booking[]? booking;
    private Hairdresser[]? hairdresser;
    private Times[]? time;
    private Category[]? category;
    private Booking newBooking = new Booking();
    private Customer[]? customer;
    private Customer newCustomer = new Customer();
    private bool bookingAdded = false;
    private bool isNewCustomer = false;


    protected override async Task OnInitializedAsync()
    {
        await getHairdressers();
        await getTimes();
        await getCategories();
    }

    private async Task getHairdressers()
    {
        hairdresser = await Http.GetFromJsonAsync<Hairdresser[]>("http://localhost:5004/api/Hairdresser");
    }

    private async Task getCategories()
    {
        category = await Http.GetFromJsonAsync<Category[]>("http://localhost:5004/api/Category");
    }

    private async Task getTimes()
    {
        time = await Http.GetFromJsonAsync<Times[]>("http://localhost:5004/api/Time");
    }
    //Post anrop
    private async Task AddNewBooking()
    {
        try
        {
            if (isNewCustomer)
            {
                //skapar ny kund om kunden är ny
                var customerJson = JsonSerializer.Serialize(newCustomer);
                var customerContent = new StringContent(customerJson, Encoding.UTF8, "application/json");
                var customerResponse = await Http.PostAsync("http://localhost:5004/api/Customer", customerContent);
                customerResponse.EnsureSuccessStatusCode();
                //läser in den skapade kuneden
                var createdCustomer = await customerResponse.Content.ReadFromJsonAsync<Customer>();
                if (createdCustomer != null)
                {

                    newBooking.CustomerId = createdCustomer.Id;
                }
            }
            //skapar ny bokning
            var bookingJson = JsonSerializer.Serialize(newBooking);
            var bookingContent = new StringContent(bookingJson, Encoding.UTF8, "application/json");
            var authToken = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
            //skickar med token för autentisering
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", authToken);
            var bookingResponse = await Http.PostAsync("http://localhost:5004/api/Booking", bookingContent);

            if (bookingResponse.IsSuccessStatusCode)
            {
                //skapar bokning 
                bookingAdded = true;
                newBooking = new Booking();
                StateHasChanged(); // Uppdatera gränssnittet
            }
        }
        catch (Exception ex)
        {

        }
    }

    public class Booking
    {
        public int Id { get; set; }
        public DateTime BookingDateTime { get; set; } = DateTime.Now;
        [Required(ErrorMessage = "Ange ett meddelande")]
        public string Message { get; set; }
        public bool Status { get; set; } = false;

        [Required(ErrorMessage = "Ange en hårtyp")]
        public string? HairType { get; set; }
        [Required(ErrorMessage = "Ange en hårlångd")]
        public string? HairLength { get; set; }
        [Required(ErrorMessage = "Välj en tid")]
        public int TimeId { get; set; } // Referens till TimeModel
        public Times Time { get; set; }

        [Required(ErrorMessage = "Välj en frissör")]
        public int HairdresserId { get; set; }
        public Hairdresser Hairdresser { get; set; }

        [Required(ErrorMessage = "Välj en kategori")]
        public int CategoryId { get; set; }

        public Category Category { get; set; }
        [Required(ErrorMessage = "Ange kund nr eller lägg till ny")]
        public int CustomerId { get; set; }

        public Customer Customer { get; set; }
    }

    public class Times
    {
        public int Id { get; set; }
        public TimeSpan Time { get; set; }
        public bool Available { get; set; }
        public DateTime Date { get; set; }
    }

    public class Hairdresser
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

    public class Category
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public decimal Price { get; set; }
    }

    public class Customer
    {
        public int Id { get; set; }
        [Required(ErrorMessage = "Ange kundnamn")]
        public string Name { get; set; }
        [Required(ErrorMessage = "Ange epost")]
        public string Email { get; set; }
        [Required(ErrorMessage = "Ange lösenord")]
        public string Password { get; set; }
    }
}
